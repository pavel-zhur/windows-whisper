name: Build Windows Installer

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable
      run: |
        cd build_scripts
        pyinstaller --clean --noconfirm windows-whisper.spec
        
    - name: Verify executable
      run: |
        if (!(Test-Path "build_scripts\dist\WindowsWhisper.exe")) {
          throw "Executable not found after build"
        }
        $size = (Get-Item "build_scripts\dist\WindowsWhisper.exe").Length / 1MB
        Write-Host "Executable size: $([math]::Round($size, 2)) MB"
        
    - name: Create installer
      uses: joncloud/makensis-action@v4.1
      with:
        script-file: build_scripts/installer.nsi
        
    - name: Verify installer
      run: |
        cd build_scripts
        $installer = Get-ChildItem -Name "WindowsWhisper-*-Setup.exe" | Select-Object -First 1
        if (!$installer) {
          throw "Installer not found after build"
        }
        Write-Host "Installer created: $installer"
        $size = (Get-Item $installer).Length / 1MB
        Write-Host "Installer size: $([math]::Round($size, 2)) MB"
        
    - name: Get version from tag
      id: version
      run: |
        if ($env:GITHUB_REF -like "refs/tags/v*") {
          $version = $env:GITHUB_REF -replace "refs/tags/v", ""
        } else {
          $version = "dev-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        }
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        
    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: WindowsWhisper-${{ steps.version.outputs.VERSION }}-Executable
        path: build_scripts/dist/WindowsWhisper.exe
        
    - name: Upload installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: WindowsWhisper-${{ steps.version.outputs.VERSION }}-Installer
        path: build_scripts/WindowsWhisper-*-Setup.exe
        
    - name: Create GitHub Release (on tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build_scripts/dist/WindowsWhisper.exe
          build_scripts/WindowsWhisper-*-Setup.exe
        generate_release_notes: true
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build summary
      run: |
        Write-Host "================================"
        Write-Host "Build Summary"
        Write-Host "================================"
        Write-Host "Version: ${{ steps.version.outputs.VERSION }}"
        
        if (Test-Path "build_scripts\dist\WindowsWhisper.exe") {
          $exeSize = (Get-Item "build_scripts\dist\WindowsWhisper.exe").Length / 1MB
          Write-Host "Executable: WindowsWhisper.exe ($([math]::Round($exeSize, 2)) MB)"
        }
        
        $installer = Get-ChildItem "build_scripts\WindowsWhisper-*-Setup.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($installer) {
          $instSize = $installer.Length / 1MB
          Write-Host "Installer: $($installer.Name) ($([math]::Round($instSize, 2)) MB)"
        }
        
        Write-Host "================================"